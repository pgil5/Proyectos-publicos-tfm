/*
 * generated by Xtext 2.23.0
 */
package bimMixer.ide.contentassist.antlr;

import bimMixer.ide.contentassist.antlr.internal.InternalBIMMixerAppParser;
import bimMixer.services.BIMMixerAppGrammarAccess;
import com.google.common.collect.ImmutableMap;
import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.Map;
import org.eclipse.xtext.AbstractElement;
import org.eclipse.xtext.ide.editor.contentassist.antlr.AbstractContentAssistParser;

public class BIMMixerAppParser extends AbstractContentAssistParser {

	@Singleton
	public static final class NameMappings {
		
		private final Map<AbstractElement, String> mappings;
		
		@Inject
		public NameMappings(BIMMixerAppGrammarAccess grammarAccess) {
			ImmutableMap.Builder<AbstractElement, String> builder = ImmutableMap.builder();
			init(builder, grammarAccess);
			this.mappings = builder.build();
		}
		
		public String getRuleName(AbstractElement element) {
			return mappings.get(element);
		}
		
		private static void init(ImmutableMap.Builder<AbstractElement, String> builder, BIMMixerAppGrammarAccess grammarAccess) {
			builder.put(grammarAccess.getBIMCertificationAccess().getAlternatives(), "rule__BIMCertification__Alternatives");
			builder.put(grammarAccess.getEStringAccess().getAlternatives(), "rule__EString__Alternatives");
			builder.put(grammarAccess.getEFloatAccess().getAlternatives_4_0(), "rule__EFloat__Alternatives_4_0");
			builder.put(grammarAccess.getEBooleanAccess().getAlternatives(), "rule__EBoolean__Alternatives");
			builder.put(grammarAccess.getBIMMixerAppAccess().getGroup(), "rule__BIMMixerApp__Group__0");
			builder.put(grammarAccess.getBIMMixerAppAccess().getGroup_4(), "rule__BIMMixerApp__Group_4__0");
			builder.put(grammarAccess.getBreeamCertificationAccess().getGroup(), "rule__BreeamCertification__Group__0");
			builder.put(grammarAccess.getBreeamCertificationAccess().getGroup_4(), "rule__BreeamCertification__Group_4__0");
			builder.put(grammarAccess.getBreeamCertificationAccess().getGroup_5(), "rule__BreeamCertification__Group_5__0");
			builder.put(grammarAccess.getLEEDCertificationAccess().getGroup(), "rule__LEEDCertification__Group__0");
			builder.put(grammarAccess.getLEEDCertificationAccess().getGroup_4(), "rule__LEEDCertification__Group_4__0");
			builder.put(grammarAccess.getLEEDCertificationAccess().getGroup_5(), "rule__LEEDCertification__Group_5__0");
			builder.put(grammarAccess.getCategoryAccess().getGroup(), "rule__Category__Group__0");
			builder.put(grammarAccess.getCategoryAccess().getGroup_4(), "rule__Category__Group_4__0");
			builder.put(grammarAccess.getSubcategoryAccess().getGroup(), "rule__Subcategory__Group__0");
			builder.put(grammarAccess.getSubcategoryAccess().getGroup_3(), "rule__Subcategory__Group_3__0");
			builder.put(grammarAccess.getSubcategoryAccess().getGroup_4(), "rule__Subcategory__Group_4__0");
			builder.put(grammarAccess.getSubcategoryAccess().getGroup_5(), "rule__Subcategory__Group_5__0");
			builder.put(grammarAccess.getSubcategoryAccess().getGroup_6(), "rule__Subcategory__Group_6__0");
			builder.put(grammarAccess.getEFloatAccess().getGroup(), "rule__EFloat__Group__0");
			builder.put(grammarAccess.getEFloatAccess().getGroup_4(), "rule__EFloat__Group_4__0");
			builder.put(grammarAccess.getBIMMixerAppAccess().getNameAssignment_2(), "rule__BIMMixerApp__NameAssignment_2");
			builder.put(grammarAccess.getBIMMixerAppAccess().getCertificationsAssignment_4_0(), "rule__BIMMixerApp__CertificationsAssignment_4_0");
			builder.put(grammarAccess.getBIMMixerAppAccess().getCertificationsAssignment_4_1(), "rule__BIMMixerApp__CertificationsAssignment_4_1");
			builder.put(grammarAccess.getBreeamCertificationAccess().getNameAssignment_1(), "rule__BreeamCertification__NameAssignment_1");
			builder.put(grammarAccess.getBreeamCertificationAccess().getCategoriesAssignment_3(), "rule__BreeamCertification__CategoriesAssignment_3");
			builder.put(grammarAccess.getBreeamCertificationAccess().getCategoriesAssignment_4_1(), "rule__BreeamCertification__CategoriesAssignment_4_1");
			builder.put(grammarAccess.getBreeamCertificationAccess().getConnectedCertificationAssignment_5_1(), "rule__BreeamCertification__ConnectedCertificationAssignment_5_1");
			builder.put(grammarAccess.getLEEDCertificationAccess().getNameAssignment_1(), "rule__LEEDCertification__NameAssignment_1");
			builder.put(grammarAccess.getLEEDCertificationAccess().getCategoriesAssignment_3(), "rule__LEEDCertification__CategoriesAssignment_3");
			builder.put(grammarAccess.getLEEDCertificationAccess().getCategoriesAssignment_4_1(), "rule__LEEDCertification__CategoriesAssignment_4_1");
			builder.put(grammarAccess.getLEEDCertificationAccess().getConnectedCertificationAssignment_5_1(), "rule__LEEDCertification__ConnectedCertificationAssignment_5_1");
			builder.put(grammarAccess.getCategoryAccess().getNameAssignment_1(), "rule__Category__NameAssignment_1");
			builder.put(grammarAccess.getCategoryAccess().getSubCategoriesAssignment_3(), "rule__Category__SubCategoriesAssignment_3");
			builder.put(grammarAccess.getCategoryAccess().getSubCategoriesAssignment_4_1(), "rule__Category__SubCategoriesAssignment_4_1");
			builder.put(grammarAccess.getSubcategoryAccess().getNameAssignment_1(), "rule__Subcategory__NameAssignment_1");
			builder.put(grammarAccess.getSubcategoryAccess().getTextAssignment_3_1(), "rule__Subcategory__TextAssignment_3_1");
			builder.put(grammarAccess.getSubcategoryAccess().getPointsAssignment_4_1(), "rule__Subcategory__PointsAssignment_4_1");
			builder.put(grammarAccess.getSubcategoryAccess().getObtainedPointsAssignment_5_1(), "rule__Subcategory__ObtainedPointsAssignment_5_1");
			builder.put(grammarAccess.getSubcategoryAccess().getConnectionAssignment_6_1(), "rule__Subcategory__ConnectionAssignment_6_1");
			builder.put(grammarAccess.getSubcategoryAccess().getRequiredAssignment_7(), "rule__Subcategory__RequiredAssignment_7");
		}
	}
	
	@Inject
	private NameMappings nameMappings;

	@Inject
	private BIMMixerAppGrammarAccess grammarAccess;

	@Override
	protected InternalBIMMixerAppParser createParser() {
		InternalBIMMixerAppParser result = new InternalBIMMixerAppParser(null);
		result.setGrammarAccess(grammarAccess);
		return result;
	}

	@Override
	protected String getRuleName(AbstractElement element) {
		return nameMappings.getRuleName(element);
	}

	@Override
	protected String[] getInitialHiddenTokens() {
		return new String[] { "RULE_WS", "RULE_ML_COMMENT", "RULE_SL_COMMENT" };
	}

	public BIMMixerAppGrammarAccess getGrammarAccess() {
		return this.grammarAccess;
	}

	public void setGrammarAccess(BIMMixerAppGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}
	
	public NameMappings getNameMappings() {
		return nameMappings;
	}
	
	public void setNameMappings(NameMappings nameMappings) {
		this.nameMappings = nameMappings;
	}
}
