/*
 * generated by Xtext 2.23.0
 */
package bimMixer.serializer;

import BIMMixer.BIMMixerApp;
import BIMMixer.BIMMixerPackage;
import BIMMixer.BreeamCertification;
import BIMMixer.Category;
import BIMMixer.LEEDCertification;
import BIMMixer.Subcategory;
import bimMixer.services.BIMMixerAppGrammarAccess;
import com.google.inject.Inject;
import java.util.Set;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Parameter;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.serializer.ISerializationContext;
import org.eclipse.xtext.serializer.sequencer.AbstractDelegatingSemanticSequencer;

@SuppressWarnings("all")
public class BIMMixerAppSemanticSequencer extends AbstractDelegatingSemanticSequencer {

	@Inject
	private BIMMixerAppGrammarAccess grammarAccess;
	
	@Override
	public void sequence(ISerializationContext context, EObject semanticObject) {
		EPackage epackage = semanticObject.eClass().getEPackage();
		ParserRule rule = context.getParserRule();
		Action action = context.getAssignedAction();
		Set<Parameter> parameters = context.getEnabledBooleanParameters();
		if (epackage == BIMMixerPackage.eINSTANCE)
			switch (semanticObject.eClass().getClassifierID()) {
			case BIMMixerPackage.BIM_MIXER_APP:
				sequence_BIMMixerApp(context, (BIMMixerApp) semanticObject); 
				return; 
			case BIMMixerPackage.BREEAM_CERTIFICATION:
				sequence_BreeamCertification(context, (BreeamCertification) semanticObject); 
				return; 
			case BIMMixerPackage.CATEGORY:
				sequence_Category(context, (Category) semanticObject); 
				return; 
			case BIMMixerPackage.LEED_CERTIFICATION:
				sequence_LEEDCertification(context, (LEEDCertification) semanticObject); 
				return; 
			case BIMMixerPackage.SUBCATEGORY:
				sequence_Subcategory(context, (Subcategory) semanticObject); 
				return; 
			}
		if (errorAcceptor != null)
			errorAcceptor.accept(diagnosticProvider.createInvalidContextOrTypeDiagnostic(semanticObject, context));
	}
	
	/**
	 * Contexts:
	 *     BIMMixerApp returns BIMMixerApp
	 *
	 * Constraint:
	 *     (name=EString (certifications+=BIMCertification certifications+=BIMCertification*)?)
	 */
	protected void sequence_BIMMixerApp(ISerializationContext context, BIMMixerApp semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BIMCertification returns BreeamCertification
	 *     BreeamCertification returns BreeamCertification
	 *
	 * Constraint:
	 *     (name=EString Categories+=Category Categories+=Category* connectedCertification=[BIMCertification|EString]?)
	 */
	protected void sequence_BreeamCertification(ISerializationContext context, BreeamCertification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Category returns Category
	 *
	 * Constraint:
	 *     (name=EString subCategories+=Subcategory subCategories+=Subcategory*)
	 */
	protected void sequence_Category(ISerializationContext context, Category semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     BIMCertification returns LEEDCertification
	 *     LEEDCertification returns LEEDCertification
	 *
	 * Constraint:
	 *     (name=EString Categories+=Category Categories+=Category* connectedCertification=[BIMCertification|EString]?)
	 */
	protected void sequence_LEEDCertification(ISerializationContext context, LEEDCertification semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
	/**
	 * Contexts:
	 *     Subcategory returns Subcategory
	 *
	 * Constraint:
	 *     (
	 *         name=EString 
	 *         text=EString? 
	 *         points=EFloat? 
	 *         obtainedPoints=EFloat? 
	 *         connection=[Subcategory|EString]? 
	 *         required?='required'?
	 *     )
	 */
	protected void sequence_Subcategory(ISerializationContext context, Subcategory semanticObject) {
		genericSequencer.createSequence(context, semanticObject);
	}
	
	
}
