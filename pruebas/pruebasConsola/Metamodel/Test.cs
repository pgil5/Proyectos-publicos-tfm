//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace pruebasConsola.GameCreator
{
    
    
    /// <summary>
    /// The default implementation of the Test class
    /// </summary>
    [XmlIdentifierAttribute("name")]
    [XmlNamespaceAttribute("GameCreator")]
    [XmlNamespacePrefixAttribute("GameCreator")]
    [DebuggerDisplayAttribute("Test {Name}")]
    public partial class Test : ModelElement, ITest, IModelElement
    {
        
        /// <summary>
        /// The backing field for the Name property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _name;
        
        private static Lazy<ITypedElement> _nameAttribute = new Lazy<ITypedElement>(RetrieveNameAttribute);
        
        /// <summary>
        /// The backing field for the Duration property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private int _duration;
        
        private static Lazy<ITypedElement> _durationAttribute = new Lazy<ITypedElement>(RetrieveDurationAttribute);
        
        /// <summary>
        /// The backing field for the Question property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _question;
        
        private static Lazy<ITypedElement> _questionAttribute = new Lazy<ITypedElement>(RetrieveQuestionAttribute);
        
        /// <summary>
        /// The backing field for the Answers property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableOrderedSet<string> _answers;
        
        private static Lazy<ITypedElement> _answersAttribute = new Lazy<ITypedElement>(RetrieveAnswersAttribute);
        
        /// <summary>
        /// The backing field for the CorrectAnswer property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private string _correctAnswer;
        
        private static Lazy<ITypedElement> _correctAnswerAttribute = new Lazy<ITypedElement>(RetrieveCorrectAnswerAttribute);
        
        /// <summary>
        /// The backing field for the Hints property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ObservableOrderedSet<string> _hints;
        
        private static Lazy<ITypedElement> _hintsAttribute = new Lazy<ITypedElement>(RetrieveHintsAttribute);
        
        /// <summary>
        /// The backing field for the Attempts property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private int _attempts = 1;
        
        private static Lazy<ITypedElement> _attemptsAttribute = new Lazy<ITypedElement>(RetrieveAttemptsAttribute);
        
        /// <summary>
        /// The backing field for the Points property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private int _points;
        
        private static Lazy<ITypedElement> _pointsAttribute = new Lazy<ITypedElement>(RetrievePointsAttribute);
        
        /// <summary>
        /// The backing field for the LocationDerivation property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private Nullable<double> _locationDerivation;
        
        private static Lazy<ITypedElement> _locationDerivationAttribute = new Lazy<ITypedElement>(RetrieveLocationDerivationAttribute);
        
        private static Lazy<ITypedElement> _locationReference = new Lazy<ITypedElement>(RetrieveLocationReference);
        
        /// <summary>
        /// The backing field for the Location property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ILocation _location;
        
        private static Lazy<ITypedElement> _onCorrectReference = new Lazy<ITypedElement>(RetrieveOnCorrectReference);
        
        /// <summary>
        /// The backing field for the OnCorrect property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ITest _onCorrect;
        
        private static Lazy<ITypedElement> _onFailureReference = new Lazy<ITypedElement>(RetrieveOnFailureReference);
        
        /// <summary>
        /// The backing field for the OnFailure property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ITest _onFailure;
        
        private static Lazy<ITypedElement> _onTimeoutReference = new Lazy<ITypedElement>(RetrieveOnTimeoutReference);
        
        /// <summary>
        /// The backing field for the OnTimeout property
        /// </summary>
        [DebuggerBrowsableAttribute(DebuggerBrowsableState.Never)]
        private ITest _onTimeout;
        
        private static IClass _classInstance;
        
        public Test()
        {
            this._answers = new ObservableOrderedSet<string>();
            this._answers.CollectionChanging += this.AnswersCollectionChanging;
            this._answers.CollectionChanged += this.AnswersCollectionChanged;
            this._hints = new ObservableOrderedSet<string>();
            this._hints.CollectionChanging += this.HintsCollectionChanging;
            this._hints.CollectionChanged += this.HintsCollectionChanged;
        }
        
        /// <summary>
        /// The name property
        /// </summary>
        [DisplayNameAttribute("name")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        public string Name
        {
            get
            {
                return this._name;
            }
            set
            {
                if ((this._name != value))
                {
                    string old = this._name;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnNameChanging(e);
                    this.OnPropertyChanging("Name", e, _nameAttribute);
                    this._name = value;
                    this.OnNameChanged(e);
                    this.OnPropertyChanged("Name", e, _nameAttribute);
                }
            }
        }
        
        /// <summary>
        /// The duration property
        /// </summary>
        [DisplayNameAttribute("duration")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("duration")]
        [XmlAttributeAttribute(true)]
        public int Duration
        {
            get
            {
                return this._duration;
            }
            set
            {
                if ((this._duration != value))
                {
                    int old = this._duration;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnDurationChanging(e);
                    this.OnPropertyChanging("Duration", e, _durationAttribute);
                    this._duration = value;
                    this.OnDurationChanged(e);
                    this.OnPropertyChanged("Duration", e, _durationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The question property
        /// </summary>
        [DisplayNameAttribute("question")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("question")]
        [XmlAttributeAttribute(true)]
        public string Question
        {
            get
            {
                return this._question;
            }
            set
            {
                if ((this._question != value))
                {
                    string old = this._question;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnQuestionChanging(e);
                    this.OnPropertyChanging("Question", e, _questionAttribute);
                    this._question = value;
                    this.OnQuestionChanged(e);
                    this.OnPropertyChanged("Question", e, _questionAttribute);
                }
            }
        }
        
        /// <summary>
        /// The answers property
        /// </summary>
        [LowerBoundAttribute(2)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("answers")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("answers")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<string> Answers
        {
            get
            {
                return this._answers;
            }
        }
        
        /// <summary>
        /// The correctAnswer property
        /// </summary>
        [DisplayNameAttribute("correctAnswer")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("correctAnswer")]
        [XmlAttributeAttribute(true)]
        public string CorrectAnswer
        {
            get
            {
                return this._correctAnswer;
            }
            set
            {
                if ((this._correctAnswer != value))
                {
                    string old = this._correctAnswer;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnCorrectAnswerChanging(e);
                    this.OnPropertyChanging("CorrectAnswer", e, _correctAnswerAttribute);
                    this._correctAnswer = value;
                    this.OnCorrectAnswerChanged(e);
                    this.OnPropertyChanged("CorrectAnswer", e, _correctAnswerAttribute);
                }
            }
        }
        
        /// <summary>
        /// The hints property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("hints")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("hints")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        public IOrderedSetExpression<string> Hints
        {
            get
            {
                return this._hints;
            }
        }
        
        /// <summary>
        /// The attempts property
        /// </summary>
        [DefaultValueAttribute(1)]
        [DisplayNameAttribute("attempts")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("attempts")]
        [XmlAttributeAttribute(true)]
        public int Attempts
        {
            get
            {
                return this._attempts;
            }
            set
            {
                if ((this._attempts != value))
                {
                    int old = this._attempts;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnAttemptsChanging(e);
                    this.OnPropertyChanging("Attempts", e, _attemptsAttribute);
                    this._attempts = value;
                    this.OnAttemptsChanged(e);
                    this.OnPropertyChanged("Attempts", e, _attemptsAttribute);
                }
            }
        }
        
        /// <summary>
        /// The points property
        /// </summary>
        [DisplayNameAttribute("points")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("points")]
        [XmlAttributeAttribute(true)]
        public int Points
        {
            get
            {
                return this._points;
            }
            set
            {
                if ((this._points != value))
                {
                    int old = this._points;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnPointsChanging(e);
                    this.OnPropertyChanging("Points", e, _pointsAttribute);
                    this._points = value;
                    this.OnPointsChanged(e);
                    this.OnPropertyChanged("Points", e, _pointsAttribute);
                }
            }
        }
        
        /// <summary>
        /// The locationDerivation property
        /// </summary>
        [DisplayNameAttribute("locationDerivation")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("locationDerivation")]
        [XmlAttributeAttribute(true)]
        public Nullable<double> LocationDerivation
        {
            get
            {
                return this._locationDerivation;
            }
            set
            {
                if ((this._locationDerivation != value))
                {
                    Nullable<double> old = this._locationDerivation;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocationDerivationChanging(e);
                    this.OnPropertyChanging("LocationDerivation", e, _locationDerivationAttribute);
                    this._locationDerivation = value;
                    this.OnLocationDerivationChanged(e);
                    this.OnPropertyChanged("LocationDerivation", e, _locationDerivationAttribute);
                }
            }
        }
        
        /// <summary>
        /// The location property
        /// </summary>
        [DisplayNameAttribute("location")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("location")]
        [XmlAttributeAttribute(true)]
        public ILocation Location
        {
            get
            {
                return this._location;
            }
            set
            {
                if ((this._location != value))
                {
                    ILocation old = this._location;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnLocationChanging(e);
                    this.OnPropertyChanging("Location", e, _locationReference);
                    this._location = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetLocation;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetLocation;
                    }
                    this.OnLocationChanged(e);
                    this.OnPropertyChanged("Location", e, _locationReference);
                }
            }
        }
        
        /// <summary>
        /// The onCorrect property
        /// </summary>
        [DisplayNameAttribute("onCorrect")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("onCorrect")]
        [XmlAttributeAttribute(true)]
        public ITest OnCorrect
        {
            get
            {
                return this._onCorrect;
            }
            set
            {
                if ((this._onCorrect != value))
                {
                    ITest old = this._onCorrect;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOnCorrectChanging(e);
                    this.OnPropertyChanging("OnCorrect", e, _onCorrectReference);
                    this._onCorrect = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOnCorrect;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOnCorrect;
                    }
                    this.OnOnCorrectChanged(e);
                    this.OnPropertyChanged("OnCorrect", e, _onCorrectReference);
                }
            }
        }
        
        /// <summary>
        /// The onFailure property
        /// </summary>
        [DisplayNameAttribute("onFailure")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("onFailure")]
        [XmlAttributeAttribute(true)]
        public ITest OnFailure
        {
            get
            {
                return this._onFailure;
            }
            set
            {
                if ((this._onFailure != value))
                {
                    ITest old = this._onFailure;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOnFailureChanging(e);
                    this.OnPropertyChanging("OnFailure", e, _onFailureReference);
                    this._onFailure = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOnFailure;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOnFailure;
                    }
                    this.OnOnFailureChanged(e);
                    this.OnPropertyChanged("OnFailure", e, _onFailureReference);
                }
            }
        }
        
        /// <summary>
        /// The onTimeout property
        /// </summary>
        [DisplayNameAttribute("onTimeout")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("onTimeout")]
        [XmlAttributeAttribute(true)]
        public ITest OnTimeout
        {
            get
            {
                return this._onTimeout;
            }
            set
            {
                if ((this._onTimeout != value))
                {
                    ITest old = this._onTimeout;
                    ValueChangedEventArgs e = new ValueChangedEventArgs(old, value);
                    this.OnOnTimeoutChanging(e);
                    this.OnPropertyChanging("OnTimeout", e, _onTimeoutReference);
                    this._onTimeout = value;
                    if ((old != null))
                    {
                        old.Deleted -= this.OnResetOnTimeout;
                    }
                    if ((value != null))
                    {
                        value.Deleted += this.OnResetOnTimeout;
                    }
                    this.OnOnTimeoutChanged(e);
                    this.OnPropertyChanged("OnTimeout", e, _onTimeoutReference);
                }
            }
        }
        
        /// <summary>
        /// Gets the referenced model elements of this model element
        /// </summary>
        public override IEnumerableExpression<IModelElement> ReferencedElements
        {
            get
            {
                return base.ReferencedElements.Concat(new TestReferencedElementsCollection(this));
            }
        }
        
        /// <summary>
        /// Gets a value indicating whether the current model element can be identified by an attribute value
        /// </summary>
        public override bool IsIdentified
        {
            get
            {
                return true;
            }
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Duration property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DurationChanging;
        
        /// <summary>
        /// Gets fired when the Duration property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> DurationChanged;
        
        /// <summary>
        /// Gets fired before the Question property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuestionChanging;
        
        /// <summary>
        /// Gets fired when the Question property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> QuestionChanged;
        
        /// <summary>
        /// Gets fired before the CorrectAnswer property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CorrectAnswerChanging;
        
        /// <summary>
        /// Gets fired when the CorrectAnswer property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> CorrectAnswerChanged;
        
        /// <summary>
        /// Gets fired before the Attempts property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AttemptsChanging;
        
        /// <summary>
        /// Gets fired when the Attempts property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> AttemptsChanged;
        
        /// <summary>
        /// Gets fired before the Points property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PointsChanging;
        
        /// <summary>
        /// Gets fired when the Points property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> PointsChanged;
        
        /// <summary>
        /// Gets fired before the LocationDerivation property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocationDerivationChanging;
        
        /// <summary>
        /// Gets fired when the LocationDerivation property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocationDerivationChanged;
        
        /// <summary>
        /// Gets fired before the Location property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocationChanging;
        
        /// <summary>
        /// Gets fired when the Location property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> LocationChanged;
        
        /// <summary>
        /// Gets fired before the OnCorrect property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OnCorrectChanging;
        
        /// <summary>
        /// Gets fired when the OnCorrect property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OnCorrectChanged;
        
        /// <summary>
        /// Gets fired before the OnFailure property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OnFailureChanging;
        
        /// <summary>
        /// Gets fired when the OnFailure property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OnFailureChanged;
        
        /// <summary>
        /// Gets fired before the OnTimeout property changes its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OnTimeoutChanging;
        
        /// <summary>
        /// Gets fired when the OnTimeout property changed its value
        /// </summary>
        public event System.EventHandler<ValueChangedEventArgs> OnTimeoutChanged;
        
        private static ITypedElement RetrieveNameAttribute()
        {
            return ((ITypedElement)(((ModelElement)(pruebasConsola.GameCreator.Test.ClassInstance)).Resolve("name")));
        }
        
        /// <summary>
        /// Raises the NameChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the NameChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnNameChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.NameChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveDurationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(pruebasConsola.GameCreator.Test.ClassInstance)).Resolve("duration")));
        }
        
        /// <summary>
        /// Raises the DurationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DurationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the DurationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnDurationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.DurationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveQuestionAttribute()
        {
            return ((ITypedElement)(((ModelElement)(pruebasConsola.GameCreator.Test.ClassInstance)).Resolve("question")));
        }
        
        /// <summary>
        /// Raises the QuestionChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuestionChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuestionChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the QuestionChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnQuestionChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.QuestionChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveAnswersAttribute()
        {
            return ((ITypedElement)(((ModelElement)(pruebasConsola.GameCreator.Test.ClassInstance)).Resolve("answers")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Answers property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AnswersCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Answers", e, _answersAttribute);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Answers property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void AnswersCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Answers", e, _answersAttribute);
        }
        
        private static ITypedElement RetrieveCorrectAnswerAttribute()
        {
            return ((ITypedElement)(((ModelElement)(pruebasConsola.GameCreator.Test.ClassInstance)).Resolve("correctAnswer")));
        }
        
        /// <summary>
        /// Raises the CorrectAnswerChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCorrectAnswerChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CorrectAnswerChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the CorrectAnswerChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnCorrectAnswerChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.CorrectAnswerChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveHintsAttribute()
        {
            return ((ITypedElement)(((ModelElement)(pruebasConsola.GameCreator.Test.ClassInstance)).Resolve("hints")));
        }
        
        /// <summary>
        /// Forwards CollectionChanging notifications for the Hints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HintsCollectionChanging(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanging("Hints", e, _hintsAttribute);
        }
        
        /// <summary>
        /// Forwards CollectionChanged notifications for the Hints property to the parent model element
        /// </summary>
        /// <param name="sender">The collection that raised the change</param>
        /// <param name="e">The original event data</param>
        private void HintsCollectionChanged(object sender, NotifyCollectionChangedEventArgs e)
        {
            this.OnCollectionChanged("Hints", e, _hintsAttribute);
        }
        
        private static ITypedElement RetrieveAttemptsAttribute()
        {
            return ((ITypedElement)(((ModelElement)(pruebasConsola.GameCreator.Test.ClassInstance)).Resolve("attempts")));
        }
        
        /// <summary>
        /// Raises the AttemptsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAttemptsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AttemptsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the AttemptsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnAttemptsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.AttemptsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrievePointsAttribute()
        {
            return ((ITypedElement)(((ModelElement)(pruebasConsola.GameCreator.Test.ClassInstance)).Resolve("points")));
        }
        
        /// <summary>
        /// Raises the PointsChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPointsChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PointsChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the PointsChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnPointsChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.PointsChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLocationDerivationAttribute()
        {
            return ((ITypedElement)(((ModelElement)(pruebasConsola.GameCreator.Test.ClassInstance)).Resolve("locationDerivation")));
        }
        
        /// <summary>
        /// Raises the LocationDerivationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocationDerivationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocationDerivationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocationDerivationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocationDerivationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocationDerivationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        private static ITypedElement RetrieveLocationReference()
        {
            return ((ITypedElement)(((ModelElement)(pruebasConsola.GameCreator.Test.ClassInstance)).Resolve("location")));
        }
        
        /// <summary>
        /// Raises the LocationChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocationChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocationChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the LocationChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnLocationChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.LocationChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the Location property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetLocation(object sender, System.EventArgs eventArgs)
        {
            this.Location = null;
        }
        
        private static ITypedElement RetrieveOnCorrectReference()
        {
            return ((ITypedElement)(((ModelElement)(pruebasConsola.GameCreator.Test.ClassInstance)).Resolve("onCorrect")));
        }
        
        /// <summary>
        /// Raises the OnCorrectChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOnCorrectChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OnCorrectChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OnCorrectChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOnCorrectChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OnCorrectChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OnCorrect property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOnCorrect(object sender, System.EventArgs eventArgs)
        {
            this.OnCorrect = null;
        }
        
        private static ITypedElement RetrieveOnFailureReference()
        {
            return ((ITypedElement)(((ModelElement)(pruebasConsola.GameCreator.Test.ClassInstance)).Resolve("onFailure")));
        }
        
        /// <summary>
        /// Raises the OnFailureChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOnFailureChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OnFailureChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OnFailureChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOnFailureChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OnFailureChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OnFailure property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOnFailure(object sender, System.EventArgs eventArgs)
        {
            this.OnFailure = null;
        }
        
        private static ITypedElement RetrieveOnTimeoutReference()
        {
            return ((ITypedElement)(((ModelElement)(pruebasConsola.GameCreator.Test.ClassInstance)).Resolve("onTimeout")));
        }
        
        /// <summary>
        /// Raises the OnTimeoutChanging event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOnTimeoutChanging(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OnTimeoutChanging;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Raises the OnTimeoutChanged event
        /// </summary>
        /// <param name="eventArgs">The event data</param>
        protected virtual void OnOnTimeoutChanged(ValueChangedEventArgs eventArgs)
        {
            System.EventHandler<ValueChangedEventArgs> handler = this.OnTimeoutChanged;
            if ((handler != null))
            {
                handler.Invoke(this, eventArgs);
            }
        }
        
        /// <summary>
        /// Handles the event that the OnTimeout property must reset
        /// </summary>
        /// <param name="sender">The object that sent this reset request</param>
        /// <param name="eventArgs">The event data for the reset event</param>
        private void OnResetOnTimeout(object sender, System.EventArgs eventArgs)
        {
            this.OnTimeout = null;
        }
        
        /// <summary>
        /// Resolves the given URI to a child model element
        /// </summary>
        /// <returns>The model element or null if it could not be found</returns>
        /// <param name="reference">The requested reference name</param>
        /// <param name="index">The index of this reference</param>
        protected override IModelElement GetModelElementForReference(string reference, int index)
        {
            if ((reference == "LOCATION"))
            {
                return this.Location;
            }
            if ((reference == "ONCORRECT"))
            {
                return this.OnCorrect;
            }
            if ((reference == "ONFAILURE"))
            {
                return this.OnFailure;
            }
            if ((reference == "ONTIMEOUT"))
            {
                return this.OnTimeout;
            }
            return base.GetModelElementForReference(reference, index);
        }
        
        /// <summary>
        /// Resolves the given attribute name
        /// </summary>
        /// <returns>The attribute value or null if it could not be found</returns>
        /// <param name="attribute">The requested attribute name</param>
        /// <param name="index">The index of this attribute</param>
        protected override object GetAttributeValue(string attribute, int index)
        {
            if ((attribute == "NAME"))
            {
                return this.Name;
            }
            if ((attribute == "DURATION"))
            {
                return this.Duration;
            }
            if ((attribute == "QUESTION"))
            {
                return this.Question;
            }
            if ((attribute == "ANSWERS"))
            {
                if ((index < this.Answers.Count))
                {
                    return this.Answers[index];
                }
                else
                {
                    return null;
                }
            }
            if ((attribute == "CORRECTANSWER"))
            {
                return this.CorrectAnswer;
            }
            if ((attribute == "HINTS"))
            {
                if ((index < this.Hints.Count))
                {
                    return this.Hints[index];
                }
                else
                {
                    return null;
                }
            }
            if ((attribute == "ATTEMPTS"))
            {
                return this.Attempts;
            }
            if ((attribute == "POINTS"))
            {
                return this.Points;
            }
            if ((attribute == "LOCATIONDERIVATION"))
            {
                return this.LocationDerivation;
            }
            return base.GetAttributeValue(attribute, index);
        }
        
        /// <summary>
        /// Gets the Model element collection for the given feature
        /// </summary>
        /// <returns>A non-generic list of elements</returns>
        /// <param name="feature">The requested feature</param>
        protected override System.Collections.IList GetCollectionForFeature(string feature)
        {
            if ((feature == "ANSWERS"))
            {
                return this._answers;
            }
            if ((feature == "HINTS"))
            {
                return this._hints;
            }
            return base.GetCollectionForFeature(feature);
        }
        
        /// <summary>
        /// Sets a value to the given feature
        /// </summary>
        /// <param name="feature">The requested feature</param>
        /// <param name="value">The value that should be set to that feature</param>
        protected override void SetFeature(string feature, object value)
        {
            if ((feature == "LOCATION"))
            {
                this.Location = ((ILocation)(value));
                return;
            }
            if ((feature == "ONCORRECT"))
            {
                this.OnCorrect = ((ITest)(value));
                return;
            }
            if ((feature == "ONFAILURE"))
            {
                this.OnFailure = ((ITest)(value));
                return;
            }
            if ((feature == "ONTIMEOUT"))
            {
                this.OnTimeout = ((ITest)(value));
                return;
            }
            if ((feature == "NAME"))
            {
                this.Name = ((string)(value));
                return;
            }
            if ((feature == "DURATION"))
            {
                this.Duration = ((int)(value));
                return;
            }
            if ((feature == "QUESTION"))
            {
                this.Question = ((string)(value));
                return;
            }
            if ((feature == "CORRECTANSWER"))
            {
                this.CorrectAnswer = ((string)(value));
                return;
            }
            if ((feature == "ATTEMPTS"))
            {
                this.Attempts = ((int)(value));
                return;
            }
            if ((feature == "POINTS"))
            {
                this.Points = ((int)(value));
                return;
            }
            if ((feature == "LOCATIONDERIVATION"))
            {
                this.LocationDerivation = ((double)(value));
                return;
            }
            base.SetFeature(feature, value);
        }
        
        /// <summary>
        /// Gets the property expression for the given attribute
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="attribute">The requested attribute in upper case</param>
        protected override NMF.Expressions.INotifyExpression<object> GetExpressionForAttribute(string attribute)
        {
            if ((attribute == "NAME"))
            {
                return new NameProxy(this);
            }
            if ((attribute == "DURATION"))
            {
                return Observable.Box(new DurationProxy(this));
            }
            if ((attribute == "QUESTION"))
            {
                return new QuestionProxy(this);
            }
            if ((attribute == "CORRECTANSWER"))
            {
                return new CorrectAnswerProxy(this);
            }
            if ((attribute == "ATTEMPTS"))
            {
                return Observable.Box(new AttemptsProxy(this));
            }
            if ((attribute == "POINTS"))
            {
                return Observable.Box(new PointsProxy(this));
            }
            if ((attribute == "LOCATIONDERIVATION"))
            {
                return Observable.Box(new LocationDerivationProxy(this));
            }
            return base.GetExpressionForAttribute(attribute);
        }
        
        /// <summary>
        /// Gets the property expression for the given reference
        /// </summary>
        /// <returns>An incremental property expression</returns>
        /// <param name="reference">The requested reference in upper case</param>
        protected override NMF.Expressions.INotifyExpression<NMF.Models.IModelElement> GetExpressionForReference(string reference)
        {
            if ((reference == "LOCATION"))
            {
                return new LocationProxy(this);
            }
            if ((reference == "ONCORRECT"))
            {
                return new OnCorrectProxy(this);
            }
            if ((reference == "ONFAILURE"))
            {
                return new OnFailureProxy(this);
            }
            if ((reference == "ONTIMEOUT"))
            {
                return new OnTimeoutProxy(this);
            }
            return base.GetExpressionForReference(reference);
        }
        
        /// <summary>
        /// Gets the Class for this model element
        /// </summary>
        public override IClass GetClass()
        {
            throw new NotSupportedException();
        }
        
        /// <summary>
        /// Gets the identifier string for this model element
        /// </summary>
        /// <returns>The identifier string</returns>
        public override string ToIdentifierString()
        {
            if ((this.Name == null))
            {
                return null;
            }
            return this.Name.ToString();
        }
        
        /// <summary>
        /// The collection class to to represent the children of the Test class
        /// </summary>
        public class TestReferencedElementsCollection : ReferenceCollection, ICollectionExpression<IModelElement>, ICollection<IModelElement>
        {
            
            private Test _parent;
            
            /// <summary>
            /// Creates a new instance
            /// </summary>
            public TestReferencedElementsCollection(Test parent)
            {
                this._parent = parent;
            }
            
            /// <summary>
            /// Gets the amount of elements contained in this collection
            /// </summary>
            public override int Count
            {
                get
                {
                    int count = 0;
                    if ((this._parent.Location != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OnCorrect != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OnFailure != null))
                    {
                        count = (count + 1);
                    }
                    if ((this._parent.OnTimeout != null))
                    {
                        count = (count + 1);
                    }
                    return count;
                }
            }
            
            protected override void AttachCore()
            {
                this._parent.LocationChanged += this.PropagateValueChanges;
                this._parent.OnCorrectChanged += this.PropagateValueChanges;
                this._parent.OnFailureChanged += this.PropagateValueChanges;
                this._parent.OnTimeoutChanged += this.PropagateValueChanges;
            }
            
            protected override void DetachCore()
            {
                this._parent.LocationChanged -= this.PropagateValueChanges;
                this._parent.OnCorrectChanged -= this.PropagateValueChanges;
                this._parent.OnFailureChanged -= this.PropagateValueChanges;
                this._parent.OnTimeoutChanged -= this.PropagateValueChanges;
            }
            
            /// <summary>
            /// Adds the given element to the collection
            /// </summary>
            /// <param name="item">The item to add</param>
            public override void Add(IModelElement item)
            {
                if ((this._parent.Location == null))
                {
                    ILocation locationCasted = item.As<ILocation>();
                    if ((locationCasted != null))
                    {
                        this._parent.Location = locationCasted;
                        return;
                    }
                }
                if ((this._parent.OnCorrect == null))
                {
                    ITest onCorrectCasted = item.As<ITest>();
                    if ((onCorrectCasted != null))
                    {
                        this._parent.OnCorrect = onCorrectCasted;
                        return;
                    }
                }
                if ((this._parent.OnFailure == null))
                {
                    ITest onFailureCasted = item.As<ITest>();
                    if ((onFailureCasted != null))
                    {
                        this._parent.OnFailure = onFailureCasted;
                        return;
                    }
                }
                if ((this._parent.OnTimeout == null))
                {
                    ITest onTimeoutCasted = item.As<ITest>();
                    if ((onTimeoutCasted != null))
                    {
                        this._parent.OnTimeout = onTimeoutCasted;
                        return;
                    }
                }
            }
            
            /// <summary>
            /// Clears the collection and resets all references that implement it.
            /// </summary>
            public override void Clear()
            {
                this._parent.Location = null;
                this._parent.OnCorrect = null;
                this._parent.OnFailure = null;
                this._parent.OnTimeout = null;
            }
            
            /// <summary>
            /// Gets a value indicating whether the given element is contained in the collection
            /// </summary>
            /// <returns>True, if it is contained, otherwise False</returns>
            /// <param name="item">The item that should be looked out for</param>
            public override bool Contains(IModelElement item)
            {
                if ((item == this._parent.Location))
                {
                    return true;
                }
                if ((item == this._parent.OnCorrect))
                {
                    return true;
                }
                if ((item == this._parent.OnFailure))
                {
                    return true;
                }
                if ((item == this._parent.OnTimeout))
                {
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Copies the contents of the collection to the given array starting from the given array index
            /// </summary>
            /// <param name="array">The array in which the elements should be copied</param>
            /// <param name="arrayIndex">The starting index</param>
            public override void CopyTo(IModelElement[] array, int arrayIndex)
            {
                if ((this._parent.Location != null))
                {
                    array[arrayIndex] = this._parent.Location;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OnCorrect != null))
                {
                    array[arrayIndex] = this._parent.OnCorrect;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OnFailure != null))
                {
                    array[arrayIndex] = this._parent.OnFailure;
                    arrayIndex = (arrayIndex + 1);
                }
                if ((this._parent.OnTimeout != null))
                {
                    array[arrayIndex] = this._parent.OnTimeout;
                    arrayIndex = (arrayIndex + 1);
                }
            }
            
            /// <summary>
            /// Removes the given item from the collection
            /// </summary>
            /// <returns>True, if the item was removed, otherwise False</returns>
            /// <param name="item">The item that should be removed</param>
            public override bool Remove(IModelElement item)
            {
                if ((this._parent.Location == item))
                {
                    this._parent.Location = null;
                    return true;
                }
                if ((this._parent.OnCorrect == item))
                {
                    this._parent.OnCorrect = null;
                    return true;
                }
                if ((this._parent.OnFailure == item))
                {
                    this._parent.OnFailure = null;
                    return true;
                }
                if ((this._parent.OnTimeout == item))
                {
                    this._parent.OnTimeout = null;
                    return true;
                }
                return false;
            }
            
            /// <summary>
            /// Gets an enumerator that enumerates the collection
            /// </summary>
            /// <returns>A generic enumerator</returns>
            public override IEnumerator<IModelElement> GetEnumerator()
            {
                return Enumerable.Empty<IModelElement>().Concat(this._parent.Location).Concat(this._parent.OnCorrect).Concat(this._parent.OnFailure).Concat(this._parent.OnTimeout).GetEnumerator();
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the name property
        /// </summary>
        private sealed class NameProxy : ModelPropertyChange<ITest, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public NameProxy(ITest modelElement) : 
                    base(modelElement, "name")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Name;
                }
                set
                {
                    this.ModelElement.Name = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the duration property
        /// </summary>
        private sealed class DurationProxy : ModelPropertyChange<ITest, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public DurationProxy(ITest modelElement) : 
                    base(modelElement, "duration")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.Duration;
                }
                set
                {
                    this.ModelElement.Duration = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the question property
        /// </summary>
        private sealed class QuestionProxy : ModelPropertyChange<ITest, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public QuestionProxy(ITest modelElement) : 
                    base(modelElement, "question")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.Question;
                }
                set
                {
                    this.ModelElement.Question = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the correctAnswer property
        /// </summary>
        private sealed class CorrectAnswerProxy : ModelPropertyChange<ITest, string>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public CorrectAnswerProxy(ITest modelElement) : 
                    base(modelElement, "correctAnswer")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override string Value
            {
                get
                {
                    return this.ModelElement.CorrectAnswer;
                }
                set
                {
                    this.ModelElement.CorrectAnswer = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the attempts property
        /// </summary>
        private sealed class AttemptsProxy : ModelPropertyChange<ITest, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public AttemptsProxy(ITest modelElement) : 
                    base(modelElement, "attempts")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.Attempts;
                }
                set
                {
                    this.ModelElement.Attempts = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the points property
        /// </summary>
        private sealed class PointsProxy : ModelPropertyChange<ITest, int>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public PointsProxy(ITest modelElement) : 
                    base(modelElement, "points")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override int Value
            {
                get
                {
                    return this.ModelElement.Points;
                }
                set
                {
                    this.ModelElement.Points = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the locationDerivation property
        /// </summary>
        private sealed class LocationDerivationProxy : ModelPropertyChange<ITest, Nullable<double>>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocationDerivationProxy(ITest modelElement) : 
                    base(modelElement, "locationDerivation")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override Nullable<double> Value
            {
                get
                {
                    return this.ModelElement.LocationDerivation;
                }
                set
                {
                    this.ModelElement.LocationDerivation = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the location property
        /// </summary>
        private sealed class LocationProxy : ModelPropertyChange<ITest, ILocation>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public LocationProxy(ITest modelElement) : 
                    base(modelElement, "location")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ILocation Value
            {
                get
                {
                    return this.ModelElement.Location;
                }
                set
                {
                    this.ModelElement.Location = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the onCorrect property
        /// </summary>
        private sealed class OnCorrectProxy : ModelPropertyChange<ITest, ITest>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OnCorrectProxy(ITest modelElement) : 
                    base(modelElement, "onCorrect")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITest Value
            {
                get
                {
                    return this.ModelElement.OnCorrect;
                }
                set
                {
                    this.ModelElement.OnCorrect = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the onFailure property
        /// </summary>
        private sealed class OnFailureProxy : ModelPropertyChange<ITest, ITest>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OnFailureProxy(ITest modelElement) : 
                    base(modelElement, "onFailure")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITest Value
            {
                get
                {
                    return this.ModelElement.OnFailure;
                }
                set
                {
                    this.ModelElement.OnFailure = value;
                }
            }
        }
        
        /// <summary>
        /// Represents a proxy to represent an incremental access to the onTimeout property
        /// </summary>
        private sealed class OnTimeoutProxy : ModelPropertyChange<ITest, ITest>
        {
            
            /// <summary>
            /// Creates a new observable property access proxy
            /// </summary>
            /// <param name="modelElement">The model instance element for which to create the property access proxy</param>
            public OnTimeoutProxy(ITest modelElement) : 
                    base(modelElement, "onTimeout")
            {
            }
            
            /// <summary>
            /// Gets or sets the value of this expression
            /// </summary>
            public override ITest Value
            {
                get
                {
                    return this.ModelElement.OnTimeout;
                }
                set
                {
                    this.ModelElement.OnTimeout = value;
                }
            }
        }
    }
}

