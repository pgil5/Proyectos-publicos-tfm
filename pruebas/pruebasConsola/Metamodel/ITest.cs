//------------------------------------------------------------------------------
// <auto-generated>
//     Este código fue generado por una herramienta.
//     Versión de runtime:4.0.30319.42000
//
//     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
//     se vuelve a generar el código.
// </auto-generated>
//------------------------------------------------------------------------------

using NMF.Collections.Generic;
using NMF.Collections.ObjectModel;
using NMF.Expressions;
using NMF.Expressions.Linq;
using NMF.Models;
using NMF.Models.Collections;
using NMF.Models.Expressions;
using NMF.Models.Meta;
using NMF.Serialization;
using NMF.Utilities;
using System;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Collections.Specialized;
using System.ComponentModel;
using System.Diagnostics;
using System.Linq;

namespace pruebasConsola.GameCreator
{
    
    
    /// <summary>
    /// The public interface for Test
    /// </summary>
    [DefaultImplementationTypeAttribute(typeof(Test))]
    [XmlDefaultImplementationTypeAttribute(typeof(Test))]
    public interface ITest : IModelElement
    {
        
        /// <summary>
        /// The name property
        /// </summary>
        [DisplayNameAttribute("name")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("name")]
        [IdAttribute()]
        [XmlAttributeAttribute(true)]
        string Name
        {
            get;
            set;
        }
        
        /// <summary>
        /// The duration property
        /// </summary>
        [DisplayNameAttribute("duration")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("duration")]
        [XmlAttributeAttribute(true)]
        int Duration
        {
            get;
            set;
        }
        
        /// <summary>
        /// The question property
        /// </summary>
        [DisplayNameAttribute("question")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("question")]
        [XmlAttributeAttribute(true)]
        string Question
        {
            get;
            set;
        }
        
        /// <summary>
        /// The answers property
        /// </summary>
        [LowerBoundAttribute(2)]
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("answers")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("answers")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        IOrderedSetExpression<string> Answers
        {
            get;
        }
        
        /// <summary>
        /// The correctAnswer property
        /// </summary>
        [DisplayNameAttribute("correctAnswer")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("correctAnswer")]
        [XmlAttributeAttribute(true)]
        string CorrectAnswer
        {
            get;
            set;
        }
        
        /// <summary>
        /// The hints property
        /// </summary>
        [DesignerSerializationVisibilityAttribute(DesignerSerializationVisibility.Content)]
        [DisplayNameAttribute("hints")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("hints")]
        [XmlAttributeAttribute(true)]
        [ConstantAttribute()]
        IOrderedSetExpression<string> Hints
        {
            get;
        }
        
        /// <summary>
        /// The attempts property
        /// </summary>
        [DefaultValueAttribute(1)]
        [DisplayNameAttribute("attempts")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("attempts")]
        [XmlAttributeAttribute(true)]
        int Attempts
        {
            get;
            set;
        }
        
        /// <summary>
        /// The points property
        /// </summary>
        [DisplayNameAttribute("points")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("points")]
        [XmlAttributeAttribute(true)]
        int Points
        {
            get;
            set;
        }
        
        /// <summary>
        /// The locationDerivation property
        /// </summary>
        [DisplayNameAttribute("locationDerivation")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("locationDerivation")]
        [XmlAttributeAttribute(true)]
        Nullable<double> LocationDerivation
        {
            get;
            set;
        }
        
        /// <summary>
        /// The location property
        /// </summary>
        [DisplayNameAttribute("location")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("location")]
        [XmlAttributeAttribute(true)]
        ILocation Location
        {
            get;
            set;
        }
        
        /// <summary>
        /// The onCorrect property
        /// </summary>
        [DisplayNameAttribute("onCorrect")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("onCorrect")]
        [XmlAttributeAttribute(true)]
        ITest OnCorrect
        {
            get;
            set;
        }
        
        /// <summary>
        /// The onFailure property
        /// </summary>
        [DisplayNameAttribute("onFailure")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("onFailure")]
        [XmlAttributeAttribute(true)]
        ITest OnFailure
        {
            get;
            set;
        }
        
        /// <summary>
        /// The onTimeout property
        /// </summary>
        [DisplayNameAttribute("onTimeout")]
        [CategoryAttribute("Test")]
        [XmlElementNameAttribute("onTimeout")]
        [XmlAttributeAttribute(true)]
        ITest OnTimeout
        {
            get;
            set;
        }
        
        /// <summary>
        /// Gets fired before the Name property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanging;
        
        /// <summary>
        /// Gets fired when the Name property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> NameChanged;
        
        /// <summary>
        /// Gets fired before the Duration property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DurationChanging;
        
        /// <summary>
        /// Gets fired when the Duration property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> DurationChanged;
        
        /// <summary>
        /// Gets fired before the Question property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> QuestionChanging;
        
        /// <summary>
        /// Gets fired when the Question property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> QuestionChanged;
        
        /// <summary>
        /// Gets fired before the CorrectAnswer property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CorrectAnswerChanging;
        
        /// <summary>
        /// Gets fired when the CorrectAnswer property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> CorrectAnswerChanged;
        
        /// <summary>
        /// Gets fired before the Attempts property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AttemptsChanging;
        
        /// <summary>
        /// Gets fired when the Attempts property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> AttemptsChanged;
        
        /// <summary>
        /// Gets fired before the Points property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PointsChanging;
        
        /// <summary>
        /// Gets fired when the Points property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> PointsChanged;
        
        /// <summary>
        /// Gets fired before the LocationDerivation property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LocationDerivationChanging;
        
        /// <summary>
        /// Gets fired when the LocationDerivation property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LocationDerivationChanged;
        
        /// <summary>
        /// Gets fired before the Location property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LocationChanging;
        
        /// <summary>
        /// Gets fired when the Location property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> LocationChanged;
        
        /// <summary>
        /// Gets fired before the OnCorrect property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OnCorrectChanging;
        
        /// <summary>
        /// Gets fired when the OnCorrect property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OnCorrectChanged;
        
        /// <summary>
        /// Gets fired before the OnFailure property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OnFailureChanging;
        
        /// <summary>
        /// Gets fired when the OnFailure property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OnFailureChanged;
        
        /// <summary>
        /// Gets fired before the OnTimeout property changes its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OnTimeoutChanging;
        
        /// <summary>
        /// Gets fired when the OnTimeout property changed its value
        /// </summary>
        event System.EventHandler<ValueChangedEventArgs> OnTimeoutChanged;
    }
}

